[{"content":"In July, we merged 33 PRs! ðŸŽ‰\nOn the side of the frontend, Nadrieril and I worked at making hax handling of binders (e.g. 'a in for\u0026lt;'a\u0026gt; \u0026amp;'a T: PartialEq\u0026lt;i32\u0026gt;) and traits better. This is not finished yet, but we made great progress. Our goal is to make the frontend work on every valid Rust code.\nIn the engine, thanks to paulmure, we now are able to process unsafe blocks. Thanks to maximebuyse, the engine can now rewrite more return expressions: we are now planning on supporting return inside loops, along with break and continue.\nWe\u0026rsquo;ve been improving F* support and F* libraries. Importantly, cmester0 is working on a model of core, in Rust: we aim at replacing our hand-crafted F* model of core by an hax extraction of this new core model implemented in Rust. We will also be able to extract this model of core in every of our backends, enabling a uniform and pain-free core multi-backend library.\nMerged Pull Requests #934: chore: assign an issue id for every error in the engine #932: chore: assign an issue for every error in import_thir #919: fix #422 #918: chore: remove stale Hax.Lib.fst #917: doc: disambiguate_local_idents #916: update Cargo.lock #909: Revert \u0026ldquo;fix(engine/fstar): fix super typeclasses attributes\u0026rdquo; #908: fix(engine/deps): stop re-computing over and over the set of assoc items #907: Add RewriteControlFlow phase. #906: Cleanup trait resolution #902: fix(engine/fstar): fix super typeclasses attributes #901: Determine emuerate value by index #898: Fix some binder-related crashes #895: Don\u0026rsquo;t eval constants eagerly #894: Detangle trait solving from SInto #892: Support other variants of MIR #891: fix: fstar: default trait #887: Initial cleanup of binders-related code #885: docs(book): depend on hax-lib only when using hax #884: Fix incorrect line numbers in error messages #883: Fix step boundaries in fold_range_step_by #882: fix(fstar-core): add support for Option::map #880: Support float literals #877: Avoid recursing twice on the arguments. #876: Translate additional unsafe MIR operations #873: Small PR to fix circularity in Core.Fmt.fsti #872: Pre post impl blocks #870: count-ones post-condition #868: engine: kill a few exn to get useful errors #867: Backend: Import unsafe code as a gated feature #860: fix(engine): make dep. analysis sensible to UID assoc. items #827: Add infos impl #819: Add Rust Core Fstar Definitions. Contributors Nadrieril R1kM ROMemories W95Psp franziskuskiefer gaetan-sbt karthikbhargavan mamonet maximebuyse paulmure ","permalink":"https://hacspec.github.io/blog/posts/this-month-in-hax/2024-09/","summary":"In July, we merged 33 PRs! ðŸŽ‰\nOn the side of the frontend, Nadrieril and I worked at making hax handling of binders (e.g. 'a in for\u0026lt;'a\u0026gt; \u0026amp;'a T: PartialEq\u0026lt;i32\u0026gt;) and traits better. This is not finished yet, but we made great progress. Our goal is to make the frontend work on every valid Rust code.\nIn the engine, thanks to paulmure, we now are able to process unsafe blocks. Thanks to maximebuyse, the engine can now rewrite more return expressions: we are now planning on supporting return inside loops, along with break and continue.","title":"This month in hax: September 2024"},{"content":"In July, we merged 32 PRs! ðŸŽ‰\nOn the side of the frontend and CLI, we had a lot of fixes and improvements! The hax command line and rustc driver were refactored, allowing for better scaling and caching. We also improved the general ergonomics: diagnostics can now be output in JSON, we have improved error messages\u0026hellip; And we pushed various bug fixes.\nIn the engine, we now resugar asserts properly and support dyn. We also pushed various enhancements (visitors for the internal AST are generated again, we propagate some more trait generics arguments\u0026hellip;) and bug fixes.\nOn the topic of libraries and helper macros, users can now add requires and ensures clauses directly on traits.\nMerged Pull Requests #811: Add mli for phase_reconstruct_for_index_loops. #802: Add json format option #800: feat(engine/ocaml_of_json_schema): add val to keyword list #799: fix(bounded-ints): zero and one were inverted #797: Fix potentially looping predicate_id. #796: Add nicer error messages when rustc emits an error in detect_forking. #795: fix: precondition constraints should be of the shape true =\u0026gt; pred #794: Resugar asserts #792: feat(frontend): Add option to control output directory #790: Allow ensures and requires on traits #788: Fix #296 #779: Support let-else pattern. #777: Small typo fixes for hax book #776: feat(book): fix checkboxes #769: Extensions to the proof-libs for libcrux-ml-kem #765: fix(engine/lib): import associated item projection on generic bounds #764: feat(hax-lib): allow requires \u0026amp; ensures on \u0026amp;mut inputs functions #763: fix(hax-lib): refinements: various fixes #762: fix(hax-lib): use super::* in refinement expansion #759: fix(frontend): crashes on fn ptr #758: fix color printing in util script #756: fix(frontend): kill crate_type in HaxMeta #753: exporter: make it need nightly only when feature rustc is on #751: Engine: propagate trait generics arguments #750: feat(exporter): thir: call: separate trait VS method generic args #744: doc(engine): ppx_functor_application #743: Refactor of the frontend #730: fix(frontend): make path_to breadth-first #729: Move book from hacspec/book to hacspec/hax #727: fix(engine): Concrete_ident_generated: name -\u0026gt; t, derive more #698: Generate visitors automatically Contributors paulmure maximebuyse karthikbhargavan W95Psp ","permalink":"https://hacspec.github.io/blog/posts/this-month-in-hax/2024-07/","summary":"In July, we merged 32 PRs! ðŸŽ‰\nOn the side of the frontend and CLI, we had a lot of fixes and improvements! The hax command line and rustc driver were refactored, allowing for better scaling and caching. We also improved the general ergonomics: diagnostics can now be output in JSON, we have improved error messages\u0026hellip; And we pushed various bug fixes.\nIn the engine, we now resugar asserts properly and support dyn.","title":"This month in hax: July 2024"},{"content":"This first blog post inaugurates our series named \u0026ldquo;This Month in hax\u0026rdquo;: a series of short highlights of what happened in the development of hax and it\u0026rsquo;s ecosystem in the month.\nIn June, 23 PRs have been merged ðŸŽ‰! The detail is available below.\nOn the Rust side, we have updated the Rust compiler to a very recent nightly thanks to @Nadrieril! We also added support for more Rust features in the frontend (dyn Trait), more disciminant informations on ADTs, fixed various bugs, and improved the general experience of using hax.\nWe pushed many fixes for the F* backend in the engine and improved the F* proof library. We also improved the bounded integer library and it\u0026rsquo;s F* integration.\nMerged Pull Requests Translate dyn Trait information fix(engine/fstar): use Base.String.hash instead of String.hash feat: add LICENSE Update rustc all at once refactor(engine/fstar-ast): get rid of zarith and GMP Update rustc fix(engine/fstar): fix implicit discrepancies in traits feat(nix): reduce closure size for hax-engine Generalize bounded ints Don\u0026rsquo;t use strings to represent paths Update rustc fix(backends/fstar): no __marker_trait if parent bounds feat(proof-libs): add t_Default feat(hax): logging: enable tracing in release, add trait-related logs fix(exporter): disable impl expr resolution under type aliases fix: rename action for extracting ml-kem feat: isolate DefId: faster build times fix(README): always begin relative path with ./, rewrite in action fix(ci): newer version of ppx_deriving (6.0.2) loops indefinitely Update to OCaml 5 Export discriminant values in AdtDef Update README.md Bump rustc version ","permalink":"https://hacspec.github.io/blog/posts/this-month-in-hax/2024-06/","summary":"This first blog post inaugurates our series named \u0026ldquo;This Month in hax\u0026rdquo;: a series of short highlights of what happened in the development of hax and it\u0026rsquo;s ecosystem in the month.\nIn June, 23 PRs have been merged ðŸŽ‰! The detail is available below.\nOn the Rust side, we have updated the Rust compiler to a very recent nightly thanks to @Nadrieril! We also added support for more Rust features in the frontend (dyn Trait), more disciminant informations on ADTs, fixed various bugs, and improved the general experience of using hax.","title":"This month in hax: June 2024"},{"content":"We have been applying hax to verify several Rust pieces of software recently. hax was used to verify Libcrux\u0026rsquo;s implementation of ML-KEM with F*, but also for smart contracts verification with Coq, and even on protocols with F* and our new ProVerif backend.\nMeanwhile, we also presented hax at several conferences and workshops. The need for more documentation and guidance was becoming apparent: it was about time to have a tutorial!\nNew resources to learn more about hax The hax book has three new chapters:\nThe Quick start chapter explains how to go from a simple Rust crate to an F* extraction via hax, including how to install the tooling. The Tutorial chapter goes more in-depth into using hax and F* together to prove various properties of Rust code. The FAQ chapter is a work in progress but is intended to answer pragmatically and with examples to precise common issues or questions. Feel free to open an issue on the book repository if you feel like a topic should be addressed! We also added several examples of Rust verification via hax and F* in the example directory of hax, please check them out!\n","permalink":"https://hacspec.github.io/blog/posts/announcement-tutorial/","summary":"We have been applying hax to verify several Rust pieces of software recently. hax was used to verify Libcrux\u0026rsquo;s implementation of ML-KEM with F*, but also for smart contracts verification with Coq, and even on protocols with F* and our new ProVerif backend.\nMeanwhile, we also presented hax at several conferences and workshops. The need for more documentation and guidance was becoming apparent: it was about time to have a tutorial!","title":"Announcing the hax tutorial"},{"content":"This has been in the making for a while now. But we are finally happy to announce the first release of hax. It is still early days and we only tagged v0.1. But a ton of work has gone into this release.\nWait, what is hax?\nLet\u0026rsquo;s start at the beginning. A group of us started hacspec (high assurance crypto specifications), a language for specifying cryptographic primitives as the basis for formal verification, in early 2018 at the HACS workshop. After two iterations on hacspec the project outgrew the name and the initial crypto-oriented scope.\nHere comes hax. hax is a tool for high assurance translations that translates a large-ish subset of safe Rust into the formal languages accepted by proof assistants such as F* or Coq. Backends for other provers like EasyCrypt are under construction.\nThis is the result of joint work between the Prosecco team at Inria, Cryspen, and Prof. Spitters\u0026rsquo; group at Aarhus University.\nThe key design principle behind hax is hat we want to build a usable tool for verifying Rust programs without forcing the user to commit to a specific proof environment. In the future, we hope multiple tool developers will find it fruitful to build backends for hax.\nSo what is hacspec now?\nhacspec is a purely functional subset of Rust that can be used, together with a hacspec standard library, to write succinct, executable, and verifiable specifications in Rust. These specifications can be translated into formal languages with hax.\nhax There are a number of Rust verification projects out there. See, for example, Rust Verify and the Rust Formal Methods Interest Group. While most existing tools try to precisely model the most complex bits the Rust language, hax aims to be a usable and pragmatic tool that can analyze the kind of code Rust developers write on a daily basis, while abstracting away or ignoring Rust features it does not support. We believe that it is important in practice to have a usable tool that can ingest large Rust crates to show properties on certain parts of the code, instead of getting stuck on hard corner cases.\nhax has two parts: the exporter and the engine.\nThe Exporter When hax is invoked on a Rust crate, the exporter hooks into the Rust compiler. Compiling a program, Rust transformes the user source code to various internal representations in an optimized fashion (essentially HIR, THIR and MIR, illustrated in the diagram below). While this is great within the compiler, those representations are not friendly to external tool consumption.\nThe hax exporter is a Rust driver that provides a bridge from those unstable internal representations to fixed and easy-to-consume ASTs1 (abstract syntax trees). The JSON node on the diagram below represents those ASTs.\nThe hax exporter is not opinionated toward the hax project: it can be used as a frontend to the Rust compiler in other projects. For example, we are working with the Aeneas project towards sharing the exporter code between the two tools.\nThe Engine The magic of hax really happens in the engine, written in OCaml. It directly consumes2 the output of the exporter, that is, the ASTs exported for your crate of choice.\nUpon the backend choice (for instance: shall we extract to F* or to Coq?), the engine proceeds to a sequence of typed3 program transformations, eventually landing into the sublanguage supported by the targeted language, e.g. F*.\nThe various program transformations are called phases. We have a dozen of them:\ntransforming and functionalizing for loops; functionalizing local mutation; rewrite functions with mutable references as inputs into state-passing code; and many more! Those phases are statically typed: for instance, making for loops functional is not possible on an AST that still contains local mutation. Such constraints are ensured statically, reducing opportunities for bugs.\nThis typed phase design allows us to target heterogeneous languages: for instance, we already support a backend in the imperative language of the SSProve Coq library. This comes with an automatic proof that it is equivalent to the functional interpretation. This can be seen as a case-by-case correctness proof of hax.\nThis design can be used as a template for the upcoming backend which targets the imperative language of EasyCrypt.\nUsage hax is still heavily under development. It is therefore recommended to install it straight from the git repository (see the Installation section in the readme).\nAfter installing it you can call it from any Rust crate.\ncargo hax into fstar This will extract the crate to F*. Similarly, cargo hax into coq will extract the crate to Coq.\nFor more options use\ncargo hax into --help Example We walk through a sample usage of hax based on an example. The example can be found in the git repository.\nGo to the proofs/fstar/extraction directory and run make. This will first call\ncargo hax into -i \u0026#39;-** +**::process_order\u0026#39; fstar in order to extract the process_order order function to F*. This demonstrates one particularly useful feature in hax, which allows extracting only a small portion or single function from a much larger crate. The argument -i '-** +**::process_order' tells hax to include the process_order function in any module and exclude (-**) everything else. In addition to the function itself, hax extracts all the required dependencies within the crate as well.\nRust fn process_order\u0026lt;T\u0026gt;(mut order: Order, other_side: \u0026amp;mut BinaryHeap\u0026lt;T\u0026gt;) -\u0026gt; (Vec\u0026lt;Match\u0026gt;, Option\u0026lt;Order\u0026gt;) where T: Into\u0026lt;Order\u0026gt; + From\u0026lt;Order\u0026gt; + Ord + Clone, { ... if let Some(m) = other_side .peek() .and_then(|other| Into::into(other.clone()).try_match(\u0026amp;order)) { order.quantity -= m.quantity; let mut other: Order = Into::into(other_side.pop().unwrap()); other.quantity -= m.quantity; if other.quantity \u0026gt; 0 { other_side.push(From::from(other.clone())); } matches.push(m); } else { done = true; } ... } F* match Core.Option.impl__and_then (Alloc.Collections.Binary_heap.impl_10__peek other_side \u0026lt;: Core.Option.t_Option v_T) (fun other -\u0026gt; impl__Order__try_match (Core.Convert.f_into (Core.Clone.f_clone other \u0026lt;: v_T) \u0026lt;: t_Order) order \u0026lt;: Core.Option.t_Option t_Match) \u0026lt;: Core.Option.t_Option t_Match with | Core.Option.Option_Some m -\u0026gt; let order:t_Order = { order with f_quantity = order.f_quantity -! m.f_quantity } in let tmp0, out:(Alloc.Collections.Binary_heap.t_BinaryHeap v_T \u0026amp; Core.Option.t_Option v_T) = Alloc.Collections.Binary_heap.impl_9__pop other_side in let other_side:Alloc.Collections.Binary_heap.t_BinaryHeap v_T = tmp0 in let hoist1:Core.Option.t_Option v_T = out in let hoist2:v_T = Core.Option.impl__unwrap hoist1 in let (other: t_Order):t_Order = Core.Convert.f_into hoist2 in let other:t_Order = { other with f_quantity = other.f_quantity -! m.f_quantity } in let other_side:Alloc.Collections.Binary_heap.t_BinaryHeap v_T = if other.f_quantity \u0026gt;. 0uL then let other_side:Alloc.Collections.Binary_heap.t_BinaryHeap v_T = Alloc.Collections.Binary_heap.impl_9__push other_side (Core.Convert.f_from (Core.Clone.f_clone other \u0026lt;: t_Order) \u0026lt;: v_T) in other_side else other_side in let matches:Alloc.Vec.t_Vec t_Match Alloc.Alloc.t_Global = Alloc.Vec.impl_1__push matches m in done, matches, order, other_side | _ -\u0026gt; let done:bool = true in done, matches, order, other_side Then the makefile calls F* on the generated output. The successful typechecking in F* proves two properties on the Rust code.\nNon-panicking subtraction First, it shows that the lines with\norder.quantity -= m.quantity; do not underflow.\nConcretely, in Rust, the subtraction on u64 integers is a partial operation: the subtraction of x and y (x - y) is defined only when x is greater or equal to y such that x - y \u0026gt;= 0.\nSuch a requirement cannot be expressed as a Rust type, thus Rust\u0026rsquo;s subtraction panics (in debug mode) when it is called with bad inputs.\nIn contrast, F* is ideal to express such types! We model Rust\u0026rsquo;s subtraction as a total function with a strong type signature:\nval ( -! ): x: u64 -\u0026gt; y: u64 {x \u0026gt;=. y} -\u0026gt; u64 This strong signature implies a proof obligation: whenever this F* subtraction is used, F* won\u0026rsquo;t typecheck unless it finds a proof that x \u0026gt;=. y holds.\nTherefore, typechecking in F* implies that order.quantity -= m.quantity; never underflows.\nNon-panicking unwrap Second, it shows that\nother_side.pop().unwrap() never panics, i.e. the pop always returns Some value and thus unwrap never panics.\nSimilarly to subtraction, in F*, using unwrap requires a proof that the option being unwrapped is not None.\nCall to Action hax is still under heavy development and there are many features we want to add, and many bugs to squash. We invite everyone to contribute to the project with new backends, contributing to the hax frontend or backend, or provide examples to exercise the tool.\nThe F* backend is currently being developed by the Inria Prosecco team, the Coq backend by the Aarhus team, and an EasyCrypt backend is in the works by the EasyCrypt team. We are also working with the Aeneas project to allow better interoperability between their sophisticated stateful Rust verification toolchain and hax.\nResources Zulip Git Repository Rust\u0026rsquo;s internal ASTs are very optimized in memory and require constantly to lookup things interactively with the Rust compiler. Instead, our ASTs are indirection-free trees packing as much informations as possible (e.g. types, attributes, spans\u0026hellip;), ready for direct consumption.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe exporter expose big ASTs as JSON. The Rust type definitions of those ASTs are automatically converted into OCaml type definition along with JSON serializer and deserializers, using JSON Schemas.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe internal AST used by the hax engine is functorized. This enables AST transformations to be strongly typed.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://hacspec.github.io/blog/posts/hax-v0-1/","summary":"This has been in the making for a while now. But we are finally happy to announce the first release of hax. It is still early days and we only tagged v0.1. But a ton of work has gone into this release.\nWait, what is hax?\nLet\u0026rsquo;s start at the beginning. A group of us started hacspec (high assurance crypto specifications), a language for specifying cryptographic primitives as the basis for formal verification, in early 2018 at the HACS workshop.","title":"Introducing hax ðŸŽ‚"}]